diff --git a/node_modules/@bazel/typescript/internal/ts_project.bzl b/node_modules/@bazel/typescript/internal/ts_project.bzl
index ee340fe..34c325e 100755
--- a/node_modules/@bazel/typescript/internal/ts_project.bzl
+++ b/node_modules/@bazel/typescript/internal/ts_project.bzl
@@ -665,6 +665,8 @@ def ts_project_macro(
                 Label(typescript_package),
                 Label("//@bazel/typescript"),
                 tsconfig,
+                # allow to use --worker_sandboxing option
+                Label("//@bazel/typescript/internal/worker:filegroup"),
             ],
             entry_point = Label("//@bazel/typescript/internal/worker:index.js"),
             templated_args = [
diff --git a/node_modules/@bazel/typescript/internal/worker/index.js b/node_modules/@bazel/typescript/internal/worker/index.js
index 08bf866..5b9673e 100755
--- a/node_modules/@bazel/typescript/internal/worker/index.js
+++ b/node_modules/@bazel/typescript/internal/worker/index.js
@@ -26,7 +26,7 @@ const reportWatchStatusChanged = (diagnostic) => {
     worker.debug(ts.formatDiagnostic(diagnostic, formatHost));
 };
 function createWatchProgram(options, tsconfigPath, setTimeout) {
-    const host = createWatchCompilerHost(tsconfigPath, options, Object.assign(Object.assign({}, ts.sys), { setTimeout }), ts.createEmitAndSemanticDiagnosticsBuilderProgram, reportDiagnostic, reportWatchStatusChanged);
+    const host = createWatchCompilerHost(tsconfigPath, options, Object.assign(Object.assign({}, ts.sys), { setTimeout, /* override ts writing into stdout to allow use --define=VERBOSE_LOGS=1 in worker mode */ write: worker.debug }), ts.createEmitAndSemanticDiagnosticsBuilderProgram, reportDiagnostic, reportWatchStatusChanged);
     return ts.createWatchProgram(host);
 }
 let workerRequestTimestamp;
diff --git a/node_modules/@bazel/typescript/internal/worker/worker.js b/node_modules/@bazel/typescript/internal/worker/worker.js
index d6e188a..c546529 100755
--- a/node_modules/@bazel/typescript/internal/worker/worker.js
+++ b/node_modules/@bazel/typescript/internal/worker/worker.js
@@ -18,6 +18,7 @@ var __asyncValues = (this && this.__asyncValues) || function (o) {
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.runWorkerLoop = exports.runAsWorker = exports.log = exports.debug = exports.DEBUG = void 0;
 const path = require("path");
+const fs = require("fs");
 const protobufjs = require("protobufjs");
 // Equivalent of running node with --expose-gc
 // but easier to write tooling since we don't need to inject that arg to
@@ -32,7 +33,8 @@ if (typeof global.gc !== 'function') {
  * Whether to print debug messages (to console.error) from the debug function
  * below.
  */
-exports.DEBUG = false;
+// expose debug logs only for builds with --define=VERBOSE_LOGS=1
+exports.DEBUG = process.env.VERBOSE_LOGS === '1';
 /** Maybe print a debug message (depending on a flag defaulting to false). */
 function debug(...args) {
     if (exports.DEBUG)
@@ -153,7 +155,21 @@ function runWorkerLoop(runOneBuild) {
                         // Once a message has been read, remove it from buf so that if we pause
                         // to read more input, this message will not be processed again.
                         buf = buf.slice(messageStart);
-                        debug('=== Handling new build request');
+                         // [link_node_modules.js] creating symlink node_modules -> /private/var/tmp/_bazel_wenqer/5d6c27e972ac51e406954ce181bfe7b4/execroot/bazel_ts_project_worker/external/npm/node_modules
+                        var target = path.join(process.cwd(), '/external/npm/node_modules')
+                        debug('=== Handling new build request', process.cwd(), target);
+
+                        if (fs.existsSync(path.resolve(process.cwd(), 'node_modules'))) {
+                            debug('node_modules link exist')
+                        } else {
+                            debug('missing node_modules link, goto recreate')
+                            try {
+                              fs.symlinkSync(target, 'node_modules', 'junction');
+                            } catch (e) {
+                              debug('unexpected symlink error', target, process.cwd(), e.toString())
+                            }
+                        }
+
                         const args = req.arguments;
                         const inputs = {};
                         for (const input of req.inputs) {
